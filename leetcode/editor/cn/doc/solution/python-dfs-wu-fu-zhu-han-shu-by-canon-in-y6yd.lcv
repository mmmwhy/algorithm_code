### 解题思路

节点*node*的层序遍历就是它本身加上它的子节点们的层序遍历。(需要把子节点们的层序遍历合并起来。)

拿测试用例举个例子
![image.png](https://pic.leetcode-cn.com/1662363522-yfntER-image.png)
叶子结点5的层序遍历就是它本身[[5]]，因为它没有子节点。

节点3的子节点有5，6，它们的层序遍历分别是[[5]], [[6]]。把它们按照顺序合并起来就变成[[5,6]]了，再在头部加上节点3，就变成[[3], [5,6]]。这就是节点3的层序遍历。

节点1的子节点有3，2，4，它们的层序遍历分别是[[3],[5,6]], [[2]], [[4]]。把他们按照顺序合并起来就变成[[3,2,4],[5,6]]了，再在头部加上节点1，就变成[[1],[3,2,4],[5,6]]了。这就是整棵树的层序遍历。

### 代码

* []

```python
class Solution:
    def levelOrder(self, root: 'Node') -> List[List[int]]:
        if not root: # 判断根节点为空
            return []
        if not root.children: # 如果是叶子节点，返回节点本身
            return [[root.val]]
        cur = []
        for child in root.children:
            nxt = self.levelOrder(child)
            idx = 0
            while idx < len(cur) and idx < len(nxt): # 合并叶子结点的层序遍历
                cur[idx] += nxt[idx]
                idx += 1
            cur += nxt[idx:]
        return [[root.val]] + cur # 再头部加上节点本身
```

