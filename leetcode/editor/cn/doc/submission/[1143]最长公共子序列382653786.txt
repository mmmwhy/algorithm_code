class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        self.memo = {}
        return self.dp(text1, len(text1) - 1, text2, len(text2) - 1)
    
    def dp(self, text1, i, text2, j):
        if (i, j) in self.memo:
            return self.memo[(i, j)]
        
        # 定义 text1[:i] 与 text2[:j] 的最长公共子序列的长度是 dp[i][j]
        if i == -1 or j == -1:
            return 0
        if text1[i] == text2[j]:
            return self.dp(text1, i - 1, text2, j - 1) + 1
        else:
            res = max(self.dp(text1, i - 1, text2, j), self.dp(text1, i, text2, j - 1))
            self.memo[(i, j)] = res
            return self.memo[(i, j)]



# runtime:1012 ms
# memory:135.4 MB
