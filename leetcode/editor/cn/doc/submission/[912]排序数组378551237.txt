class Solution:
    def quick_sort(self, nums, left, right):
        flag = nums[random.randint(left, right)]
        i, j = left, right
        while i < j:
            while nums[i] < flag: i += 1
            while nums[j] > flag: j -= 1
            
            if i <= j:
                nums[i], nums[j] = nums[j], nums[i]
                i += 1
                j -= 1
        if i < right: self.quick_sort(nums, i, right)
        if j > left: self.quick_sort(nums, left, j)
    
    def sortArray(self, nums: List[int]) -> List[int]:
        # 实现一个快速排序
        self.quick_sort(nums, 0, len(nums) - 1)
        return nums


class Solution3:
    def sortArray(self, nums: List[int]) -> List[int]:
        import random  # 导入随机数函数库
        def quicksort(nums, left, right):
            flag = nums[random.randint(left, right)]  # 随机初始化哨兵位置
            i, j = left, right  # 设定从左到右的指针i，从右到左的指针j
            while i <= j:
                while nums[i] < flag: i += 1  # i从左往右扫，找到大于等于flag的数。
                while nums[j] > flag: j -= 1  # j从右往左扫，找到小于等于flag的数。
                if i <= j:
                    nums[i], nums[j] = nums[j], nums[i]  # 交换左右指针下标对应的数值
                    i += 1  # 左指针继续往右走
                    j -= 1  # 右指针继续往左走
            if i < right: quicksort(nums, i, right)  # 递归解决flag左边的低位数组的排序
            if j > left:  quicksort(nums, left, j)  # 递归解决flag右边的低位数组的排序
        
        quicksort(nums, 0, len(nums) - 1)  # 函数入口，将整个数组的信息传入
        return nums  # 返回修改后的nums


class Solution4:
    
    def sortArray(self, nums: List[int]) -> List[int]:
        if len(nums) == 1:
            return nums
        
        mid = len(nums) // 2
        left_list = self.sortArray(nums[:mid])
        right_list = self.sortArray(nums[mid:])
        
        res = []
        left_idx = 0
        right_idx = 0
        left_count = len(left_list)
        right_count = len(right_list)
        
        while left_idx < left_count and right_idx < right_count:
            if left_list[left_idx] < right_list[right_idx]:
                res.append(left_list[left_idx])
                left_idx += 1
            else:
                res.append(right_list[right_idx])
                right_idx += 1
        
        if left_idx < left_count:
            res.extend(left_list[left_idx:])
        
        if right_idx < right_count:
            res.extend(right_list[right_idx:])
        
        return res


class Solution4:
    def merge_sort(self, nums, l, r):
        # 两侧都是闭合的
        if l == r:
            return
        mid = (l + r) // 2
        self.merge_sort(nums, l, mid)
        self.merge_sort(nums, mid + 1, r)
        tmp = []
        i, j = l, mid + 1
        while i <= mid or j <= r:
            if i > mid or (j <= r and nums[j] < nums[i]):
                # 左半边数组已全部被合并
                tmp.append(nums[j])
                j += 1
            else:
                # 右半边数组已全部被合并
                tmp.append(nums[i])
                i += 1
        nums[l: r + 1] = tmp
    
    def sortArray(self, nums: List[int]) -> List[int]:
        self.merge_sort(nums, 0, len(nums) - 1)
        return nums



# runtime:812 ms
# memory:21.9 MB
