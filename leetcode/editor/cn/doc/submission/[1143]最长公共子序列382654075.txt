class Solution:
    def __init__(self):
        self.memo = {}
    
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        # 因为依赖于上一个位置， 所以 dp 长宽 + 1
        # 定义 text1[:i-1] 与 text2[:j-1] 的最长公共子序列的长度是 dp[i][j]
        m, n = len(text1), len(text2)
        dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]
        
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if text1[i - 1] == text2[j - 1]:
                    dp[i][j] = dp[i - 1][j - 1] + 1
                else:
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
        return dp[m][n]
    
    def dp(self, text1, i, text2, j):
        # 使用 return self.dp(text1, len(text1) - 1, text2, len(text2) - 1) 调用
        if (i, j) in self.memo:
            return self.memo[(i, j)]
        
        # 定义 text1[:i] 与 text2[:j] 的最长公共子序列的长度是 dp[i][j]
        if i == -1 or j == -1:
            return 0
        if text1[i] == text2[j]:
            return self.dp(text1, i - 1, text2, j - 1) + 1
        else:
            res = max(self.dp(text1, i - 1, text2, j), self.dp(text1, i, text2, j - 1))
            self.memo[(i, j)] = res
            return self.memo[(i, j)]



# runtime:364 ms
# memory:23.7 MB
