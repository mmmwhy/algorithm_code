class Solution:
    
    def minWindow(self, s: str, t: str) -> str:
        need_char_2_count = {}
        for char in t:
            if char not in need_char_2_count:
                need_char_2_count[char] = 1
            else:
                need_char_2_count[char] += 1
        
        left, right = 0, 0
        res = ""
        window = []
        window_char_2_count = {}
        valid = 0
        while right < len(s):
            window.append(s[right])
            
            # 更新窗口内的数据分布
            if s[right] in window_char_2_count:
                window_char_2_count[s[right]] += 1
            else:
                window_char_2_count[s[right]] = 1
            
            if s[right] in need_char_2_count and \
                    window_char_2_count[s[right]] == need_char_2_count[s[right]]:
                valid += 1
            
            right += 1
            while valid == len(need_char_2_count):
                if res == "" or len(window) < len(res):
                    res = "".join(window)
                
                # 更新窗口内的数据分布
                if s[left] in need_char_2_count and \
                        window_char_2_count[s[left]] == need_char_2_count[s[left]]:
                    valid -= 1
                
                window_char_2_count[s[left]] -= 1
                window.pop(0)
                
                left += 1
        
        return res



# runtime:N/A
# memory:N/A
# total_testcases:267
# total_correct:267
# input_formatted:
# expected_output:
# code_output:
# runtime_error:
# last_testcase:
